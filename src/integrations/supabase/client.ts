// This file is automatically generated. Edit only to improve developer ergonomics (reading envs, guards).
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Prefer explicit Vite env variables so users can configure their own Supabase project.
// Create a `.env.local` at the project root with the keys below if you haven't already:
// VITE_SUPABASE_URL=https://your-project.supabase.co
// VITE_SUPABASE_KEY=your-anon-or-publishable-key

const SUPABASE_URL = (import.meta.env.VITE_SUPABASE_URL as string) ?? 'https://fslvosfclwtzfielelsh.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = (import.meta.env.VITE_SUPABASE_KEY as string) ?? 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzbHZvc2ZjbHd0emZpZWxlbHNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUzMjc4NjYsImV4cCI6MjA3MDkwMzg2Nn0.llNscA4Ra5IHg1at4pP1g485m1NXsAZ9od710nhbCKc';

// A runtime flag consumers can use to show a clearer UI when envs are missing.
const HAS_VITE_ENV = Boolean(import.meta.env.VITE_SUPABASE_URL && import.meta.env.VITE_SUPABASE_KEY);
export const isSupabaseConfigured = HAS_VITE_ENV;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  // Helpful runtime warning for developers running the app without proper envs.
  // This will appear in the browser console and in Node if SSR is used.
  // The app will still attempt to create the client, but network requests will fail with 'Failed to fetch'
  // if the URL is incorrect or unresolvable.
  // eslint-disable-next-line no-console
  console.warn('[supabase] VITE_SUPABASE_URL or VITE_SUPABASE_KEY is not set. Check .env.local or environment variables.');
}

// Guard access to `localStorage` for environments where window isn't available.
const storage = typeof window !== 'undefined' && 'localStorage' in window ? localStorage : undefined;

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage,
    persistSession: true,
    autoRefreshToken: true,
  }
});